* Basic query
#+BEGIN_SRC clojure -n :i clj :async :results verbatim code
  [:find ?name
   :where
   [11 :user/name ?name]]
#+END_SRC

- name is bound

Order doesn't matter.

=where= is a set of clauses.

Always return sets of tuples.

Datalog is declarative and logic oriented.

#+BEGIN_SRC clojure -n :i clj :async :results verbatim code
  [:find ?id
   :where
   [?id :user/name "tonsky"]]
#+END_SRC

This will find the id.

#+BEGIN_SRC clojure -n :i clj :async :results verbatim code
  [:find ?name
   :where
   [_ :user/name ?name]]
#+END_SRC

Find all usernames and return the values.

#+BEGIN_SRC text -n :async :results verbatim code
  ∈{["richhickey"] ["tonsky"] ["pithyless"]}
#+END_SRC

#+BEGIN_SRC text -n :async :results verbatim code
  ∈
      ∈	(-	2208	8712	ELEMENT OF
  
      A returned set from a query.
#+END_SRC

Sets return duplicates.

By default datomic queries return a set of tuples.
If you use the elipses then it will return a vector.

#+BEGIN_SRC clojure -n :i clj :async :results verbatim code
  [:find [?name ...]
   :where
   [_ :user/name ?name]]
#+END_SRC

#+BEGIN_SRC text -n :async :results verbatim code
  "tonsky"
#+END_SRC

It matched all 3 and return a set, so it
returns one value such that it's true.

** multiple bindings
If you want to return multiple things:

#+BEGIN_SRC clojure -n :i clj :async :results verbatim code
  [:find ?id ?name
   :where
   [?id :user/name ?name]]
#+END_SRC

#+BEGIN_SRC clojure -n :i clj :async :results verbatim code
  ∈{[11 "richhickey"] [22 "tonsky"] [33 "pithyless"]}
#+END_SRC

Now we have a tuple of 2 values.

** Add an email address
Now lets complicate the business domain.

*** The value of a constraint solver
If this is ID then anywhere I use the exact
same name all the values must match.

#+BEGIN_SRC clojure -n :i clj :async :results verbatim code
  [:find ?id ?email
   :where
   [?id :user/name "richhickey"]
   [?id :user/name ?email]]
#+END_SRC

The order doesn't matter here, but if the
solver finds with this clause an =id= that
equals =11=, it will then use that value to
find the =email=, which is perhaps contained
in a different datum.

#+BEGIN_SRC text -n :async :results verbatim code
  [?id :user/name "richhickey"]
#+END_SRC

*** You can also have multiple unknowns
It's a bit like solving a system of linear
equations, but it's boolean equations.

#+BEGIN_SRC clojure -n :i clj :async :results verbatim code
  [:find ?id ?email
   :where
   [?id :user/name "richhickey"]
   [?id :user/name ?email]]
#+END_SRC

#+BEGIN_SRC clojure -n :i clj :async :results verbatim code
  {:org/name "clojure"}

  {repo/slug "clojure/clojure"
   :repo/owner 44}
  {repo/slug "tonsky/datascript"
   :repo/owner 22}

  ;; sugar syntax
  ;; replace this reference with a 2 element vector
  ;; this says find me the entities such as org
  ;; name clojure, the 44 and it will replace it,
  ;; one with the other

  {repo/slug "clojure/clojure"
   :repo/owner [:org/name "clojure"]}
  {repo/slug "tonsky/datascript"
   :repo/owner [:org/name "tonsky"]}
#+END_SRC

Datalog has no concept of schemas.

The schema you apply is doing a read, not a write.

** Example

Given the following database:

|  e | a             | v                 |
|----+---------------+-------------------|
| 11 | =:user/name=  | richhickey        |
| 22 | =:user/name=  | tonsky            |
| 33 | =:user/name=  | pithyless         |
| 44 | =:org/name=   | clojure           |
| 55 | =:repo/slug=  | clojure/clojure   |
| 55 | =:repo/owner= | 44                |
| 66 | =:repo/slug=  | tonsky/datascript |
| 66 | =:repo/owner= | 22                |

+ Example :: What are all the repositories
  that are owned by this user ="tonsky"=?.

#+BEGIN_SRC clojure -n :i clj :async :results verbatim code
  [:find ?repo
    :where
   [?p :user/name "tonsky"]
   [?x :repo/owner ?p]
   [?r :repo/slug ?repo]]
#+END_SRC

#+BEGIN_SRC text -n :async :results verbatim code
  ∈{["tonsky/datascript"]}
#+END_SRC

This finds the =p= and =r= that satisfy and
then finally will bind and return =repo=.