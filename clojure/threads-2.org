* =time= function
#+BEGIN_SRC clojure -n :i clj :async :results verbatim code
  (time (print-frequencies (play-a-lot-of-poker 1000000 5) 1000000))
#+END_SRC

This times a function.

* executors
#+BEGIN_SRC text -n :async :results verbatim code
  Executors
      manage thread pool
#+END_SRC

* Create a pool of threads
#+BEGIN_SRC clojure -n :i clj :async :results verbatim code
  (Executors/newFixedThreadPool number-of-threads)
#+END_SRC

* repeat
Create multiple copies.

** Create multiple copies of the same function
#+BEGIN_SRC clojure -n :i clj :async :results verbatim code
  (repeat number-of-threads (fn [] (play-a-lot-of-poker num-hands-per-thread five-or-seven)))
#+END_SRC

* =merge-with=
All of the maps in poker-results have a hand
name and the number of occurrences that were
detected:

#+BEGIN_SRC lean -n :f terraform-console :async :results verbatim code
  {"Royal Flush" 3
   "Straight Flush" 14
   ...
   ...
   "High Card" 500246}
#+END_SRC

There is a function called merge-with that
will merge maps together.

If two or more maps have the same key a
function will be applied to the values with
the same key to produce a new value.

I will use the =+= function to add all of the
values in each of the maps together. This sums
up the total number of hands detected in all
of the threads.