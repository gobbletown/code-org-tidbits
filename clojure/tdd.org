** Write the tests first
#+BEGIN_SRC clojure -n :i clj :async :results verbatim code
  (use 'clojure.test)

  (defn near= [number1 number2 acceptable-difference]
      (<= (Math/abs (- number1 number2)) acceptable-difference))

  (defn sqrt [number-to-root]
      0.0)

  (deftest sqrt-tests
      (is (near= 5.0 (sqrt 25.0) 0.001))
      (is (near= 6.0 (sqrt 36.0) 0.001))
      (is (near= 10.0 (sqrt 100.0) 0.001))
      (is (near= 10.488 (sqrt 110.0) 0.001))
      (is (near= 1.414 (sqrt 2.0) 0.001)))

  (run-tests)
#+END_SRC

** Final code
- multiple recurs in one function

#+BEGIN_SRC clojure -n :i clj :async :results verbatim code
  (use 'clojure.test) 
   
  (defn near= [number1 number2 acceptable-difference] 
      (<= (Math/abs (- number1 number2)) acceptable-difference)) 
   
  (defn sqrt-helper [start end number-to-root] 
      (let [guess (/ (+ start end) 2.0) 
            guess-squared (* guess guess)] 
          (println "Guess:" guess) 
          (cond (near= guess-squared number-to-root 0.001) guess 
                (> guess-squared number-to-root) (recur start guess number-to-root) 
                :else (recur guess end number-to-root)))) 
   
  (defn sqrt [number-to-root] 
      (println) 
      (sqrt-helper 1 number-to-root number-to-root)) 
   
  (deftest sqrt-tests 
      (is (near= 5.0 (sqrt 25.0) 0.001)) 
      (is (near= 6.0 (sqrt 36.0) 0.001)) 
      (is (near= 10.0 (sqrt 100.0) 0.001)) 
      (is (near= 10.488 (sqrt 110.0) 0.001)) 
      (is (near= 1.414 (sqrt 2.0) 0.001))) 
   
  (run-tests)
#+END_SRC