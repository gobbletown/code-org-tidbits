* Introduction to Clojure macros
** =#=
The =#= in the let is used to generate a unique
name for the local binding.

The passed in code may have something in it
named temp. This would be a problem, of
course.

Anything with a =#= in it will get a unique
value appended to it. This will make the name
unique and avoid any naming collisions.

** =~=
The tilde ~ says to replace the code in the
macro with the code passed in as a parameter.

This now makes use of the passed in
parameters. temp is a value but the other
parameters are chunks of code to execute.

Remember, a macro is kind of like a code
template that has some pieces that will stay
the same and some that will be replaced. The
tilde is how I replace those parts of the
code.

The output now selects one of the printlns to
execute instead of all three.

** =macroexpand-1=

There is a function that will show you how
your macro will be expanded called
macroexpand-1. This is very helpful while
debugging your macros.

Here I am using it to see how the call to my
macro would be expanded with the four
parameters. I am printing the output of the
function call.

The screenshot has the output.

** Macros in clojure
#+BEGIN_SRC clojure -n :i clj :async :results verbatim code
  (defmacro act-on-water-state [temp if-frozen-do if-water-do if-steam-do]
      `(let [temp# ~temp]
          (cond
              (<= temp# 32) ~if-frozen-do
              (< temp# 212) ~if-water-do
              :else ~if-steam-do)))

  (defn prompt-for-int [prompt]
      (println prompt)
      (. Integer parseInt (read-line)))

  (defn handle-water-based-on-temp []
      (let [users-temp (prompt-for-int "Enter in a water temp")]
          (act-on-water-state users-temp (println "Ice") (println "Water") (println "Steam"))))

  ;(handle-water-based-on-temp)

  (println (macroexpand-1 '(act-on-water-state 20 (println "Ice") (println "Water") (println "Steam"))))

  ;(clojure.core/let [temp__1150__auto__ 20]
  ;   (clojure.core/cond
  ;       (clojure.core/<= temp__1150__auto__ 32) (println Ice)
  ;       (clojure.core/< temp__1150__auto__ 212) (println Water)
  ;       :else (println Steam)))
#+END_SRC

* Set macros
** sleep
#+BEGIN_SRC clojure -n :i clj :async :results verbatim code
  (def a-val 2) 
  (def first-set #{1 2 3}) 
   
  (defn really-slow-even? [num] 
      (println "Working on determining if a number is even...") 
      (Thread/sleep 2000) 
      (even? num))
#+END_SRC

** =and= short-circuits
Clojure's and function supports short circuit
evaluation.

In other words, if the first logical
expression evaluates to false then the second
will not even be evaluated.

This is a nice feature because I can skip the
expensive call to really-slow-even? when a
value is not in the set.