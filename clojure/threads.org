https://markm208.github.io/cljbook/chapter7/01/playback.html?view=code

** This thread prints something to the screen
#+BEGIN_SRC clojure -n :i clj :async :results verbatim code
  (def a-thread (new Thread (fn [] (println "In a thread"))))
  (.start a-thread)

  (def a-thread (new Thread (fn [] (println "In a thread"))))
  (. a-thread start)
#+END_SRC

#+RESULTS:
#+begin_src clojure
In a thread
In a thread
#+end_src

** Order of execution is not guaranteed by sequentially lining them up
#+BEGIN_SRC clojure -n :i clj :async :results verbatim code
  (println "Before creating threads")

  (def thread1 (new Thread (fn [] (println "Thread 1"))))
  (.start thread1)

  (def thread2 (new Thread (fn [] (println "Thread 2"))))
  (.start thread2)

  (def thread3 (new Thread (fn [] (println "Thread 3"))))
  (.start thread3)

  (println "After creating threads")
#+END_SRC

#+RESULTS:
#+begin_src clojure
Before creating threads
Thread 1
Thread 2
Thread 3
After creating threads
#+end_src

** main thread
There are actually four threads in this
program. The three I have created explicitly
and the one that I get automatically when I
run a Clojure program (sometimes called the
'main' thread).

#+BEGIN_SRC clojure -n :i clj :async :results verbatim code
  (println "Before creating threads")

  (def thread1 (new Thread (fn [] (println "Thread 1"))))
  (.start thread1)

  (def thread2 (new Thread (fn [] (println "Thread 2"))))
  (.start thread2)

  (def thread3 (new Thread (fn [] (println "Thread 3"))))
  (.start thread3)

  ;; This sleeps the main thread
  (Thread/sleep 500)

  (println "After creating threads")
#+END_SRC

#+RESULTS:
#+begin_src clojure
Before creating threads
Thread 1
Thread 2
Thread 3
After creating threads
#+end_src

** executors
I am importing that class so that I can create
10 threads and have them each do a little work
for me.

#+BEGIN_SRC clojure -n :i clj :async :results verbatim code
  (import '(java.util.concurrent Executors))

  ; (println "Before creating threads")

  ; (def thread1 (new Thread (fn [] (println "Thread 1"))))
  ; (.start thread1)

  ; (def thread2 (new Thread (fn [] (println "Thread 2"))))
  ; (.start thread2)

  ; (def thread3 (new Thread (fn [] (println "Thread 3"))))
  ; (.start thread3)

  ; (Thread/sleep 500)

  ; (println "After creating threads")
#+END_SRC

** future (not a keyword), just a binding
The functions the threads execute each returns
a value. That value will be stored inside a
'future' object which will hold on to the
function's return value until I am ready to
use it. Then I'll ask each future for the
return value when the thread is done and print
them.

** Final code
#+BEGIN_SRC clojure -n :i clj :async :results verbatim code
  (import '(java.util.concurrent Executors))

  (defn use-thread-pool [number-of-threads]
      (let [seq-of-numbers (range number-of-threads)
            pool (Executors/newFixedThreadPool number-of-threads)
            tasks (map (fn [thread-number] (fn [] (* (nth seq-of-numbers thread-number) 10))) seq-of-numbers)]
        (println "seq-of-numbers: ")
        (doseq [num seq-of-numbers]
          (print num ""))
        (println)
        (println "seq-of-nums times 10")

        ;; All futures have a method called get
        ;; that will return the collected value. In
        ;; this case it is a number multiplied by
        ;; 10.
        (doseq [future (.invokeAll pool tasks)]
          (print (.get future) ""))
        (.shutdown pool)))

  (use-thread-pool 10)

  ; (println "Before creating threads")

  ; (def thread1 (new Thread (fn [] (println "Thread 1"))))
  ; (.start thread1)

  ; (def thread2 (new Thread (fn [] (println "Thread 2"))))
  ; (.start thread2)

  ; (def thread3 (new Thread (fn [] (println "Thread 3"))))
  ; (.start thread3)

  ; (Thread/sleep 500)

  ; (println "After creating threads")
#+END_SRC

#+RESULTS:
#+begin_src clojure
seq-of-numbers:
0 1 2 3 4 5 6 7 8 9
seq-of-nums times 10
0 10 20 30 40 50 60 70 80 90
#+end_src
