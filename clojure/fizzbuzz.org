#+BEGIN_SRC clojure -n :i clj :async :results verbatim code
  ;; println can print lists, ints, string, etc.

  ;; doseq is like for, but it doesnt collect the values

  (defn prompt-int [prompt] 
      (println prompt) 
      (. Integer parseInt (read-line))) 
 
  (defn evenly-divisible [number divisor] 
      (= (mod number divisor) 0)) 
 
  (defn fizz-or-buzz-or-number [number] 
      (let [divisible-by-3 (evenly-divisible number 3) 
            divisible-by-5 (evenly-divisible number 5)] 
          (cond (and divisible-by-3 divisible-by-5) "fizz-buzz" 
                divisible-by-3 "fizz" 
                divisible-by-5 "buzz" 
                :else number))) 
 
  (defn fizz-buzz  
      ([start end] 
          (let [nums-in-range (range start (+ end 1)) 
                final-output (map fizz-or-buzz-or-number nums-in-range)] 
              (doseq [result final-output] 
                  (println result)))) 
     
      ([] 
          (let [start (prompt-int "Enter in a start value") 
              end (prompt-int "Enter in an end value")] 
              (fizz-buzz start end)))) 
 
  (fizz-buzz) 
  (println) 
  (fizz-buzz 100 120)
#+END_SRC