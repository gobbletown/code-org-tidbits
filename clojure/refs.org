A ref is like a mutable pointer. It can point
to different immutable values over time.
Further, Clojure makes sure that if multiple
threads are accessing the same ref they won't
interfere with each other.g

There is a function called ref-set that allows
a programmer to change what a ref points to. A
ref is mutable but the data it points to is
always immutable.

** transaction
+ transaction :: When two or more refs need to
    be updated in a coordinated operation a
    mechanism is required to make sure that all of
    the ref updates happen or none of them do.
    This is what a transaction does and Clojure
    supports them.

transaction
    Particularly powerful in multi-threaded
    programs where coordinated access to
    multiple global refs is required.