Tail recursion can be be made more safe and
efficient than regular recursion. In Clojure
the =recur= form is used to make a tail
recursive call.

#+BEGIN_SRC clojure -n :i clj :async :results verbatim code
  ; (defn infinitely-recursive [iteration-number]
  ;     (println "Iteration number:" iteration-number)
  ;     (infinitely-recursive (inc iteration-number)))

  ; (infinitely-recursive 1)

  (defn fib-helper [all-fibs left right number]
      (if (>= left  number)
          all-fibs
  ;        (fib-helper (conj all-fibs left) right (+ left right) number)))
          (recur (conj all-fibs left) right (+ left right) number)))

  (defn fibs-up-to-number [number]
      (fib-helper [] 0 1 number))

  (println (fibs-up-to-number 5))
  (println (fibs-up-to-number 50))
  (println (fibs-up-to-number 500))
#+END_SRC

The previous version uses plain old recursion
which uses a stack frame for each recursive
call.

There is a risk that if the user asks for a
big enough fib number that this function could
blow the stack.

Clojure supports 'tail recursion' with the
recur form.

Tail recursion is possible when there is
nothing done after the recursive call in a
function. In other words, nothing happens on
the way back through the call stack when the
recursion is complete.

In this case there is no work done after the
recursive call so this is a candidate for tail
recursion.

_Tail recursion_ is possible when there is
nothing done after the recursive call in a
function. In other words, nothing happens on
the way back through the call stack when the
recursion is complete.

Instead of using the call stack to make a
call, recur will cause the parameters to be
reevaluated and the flow of control will jump
to the beginning of the function simulating
recursion.

Since the call stack is not used there is no
risk of a stack overflow error but it still
feels like I am using recursion.

** fizz-buzz with recursion
#+BEGIN_SRC clojure -n :i clj :async :results verbatim code
  (defn prompt-int [prompt]
      (println prompt)
      (. Integer parseInt (read-line)))

  (defn get-digits [number all-digits]
      (if (= number 0)
          all-digits
          (recur (quot number 10) (conj all-digits (mod number 10)))))

  (defn fizz-or-buzz-or-number [number]
      (let [all-digits (get-digits number #{})
            has-digit-3 (contains? all-digits 3)
            has-digit-5 (contains? all-digits 5)]
          (cond (and has-digit-3 has-digit-5) (str "fizz-buzz (" number ")")
                has-digit-3 (str "fizz (" number ")")
                has-digit-5 (str "buzz (" number ")")
                :else number)))

  (defn fizz-buzz []
      (let [start (prompt-int "Enter in a start value")
            end (prompt-int "Enter in an end value")
            nums-in-range (range start (+ end 1))
            final-output (map fizz-or-buzz-or-number nums-in-range)]
          (doseq [result final-output]
              (println result))))

  (fizz-buzz)
#+END_SRC