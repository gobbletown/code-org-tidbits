** TDD
#+BEGIN_SRC clojure -n :i clj :async :results verbatim code
  (use 'clojure.test)

  (deftest test-convert-string-to-int
    (is (= 1001 (convert-string-to-int "1001")))
    (is (= 1234567890 (convert-string-to-int "0001234567890")))
    (is (= 9 (convert-string-to-int "1001" 2)))
    (is (= 4097 (convert-string-to-int "1001" 16)))
    (is (= 65535 (convert-string-to-int "FFFF" 16)))
    (is (= 195948557 (convert-string-to-int "BADF00D" 16))))

  (run-tests)
#+END_SRC

** Overloading functions
The syntax for creating two functions with the
same name is to surround each version in its
own set of parentheses.

The highlighted code shows the complete first
version so far.

Since no base is passed in this version I will
assume the user wants to use base 10 (the
decimal numbering system).

#+BEGIN_SRC clojure -n :i clj :async :results verbatim code
  (defn convert-string-to-int
      ([string-representation])

      ([string-representation base]))
#+END_SRC

** Else is optional
#+BEGIN_SRC clojure -n :i clj :async :results verbatim code
  (if (and (>= base 2) (<= base 16))
    (let []))
#+END_SRC

** Looping
Looping is recursive in Clojure, the loop
construct is a hack so that something like
tail-recursive-optimization works in clojure.

#+BEGIN_SRC clojure -n :i clj :async :results verbatim code
  (defn my-re-seq [re string]
    "Something like re-seq"
    (let [matcher (re-matcher re string)]

      (loop [match (re-find matcher) ;loop starts with 2 set arguments
             result []]
        (if-not match
          result
          (recur (re-find matcher)    ;loop with 2 new arguments
                 (conj result match))))))
#+END_SRC

The =recur= form belongs to =loop= in this
case.

** loop doesn't loop at all without the =recur=
#+BEGIN_SRC clojure -n :i clj :async :results verbatim code
  (loop [nums '(1 2 3) base 1] (println nums base))
#+END_SRC

** Final version
#+BEGIN_SRC clojure -n :i clj :async :results verbatim code
  (use 'clojure.test) 
   
  (defn convert-string-to-int 
      ([string-representation] (convert-string-to-int string-representation 10)) 
   
      ([string-representation base] 
          (if (and (>= base 2) (<= base 16))  
              (let [char-to-digit-map {\0 0 \1 1 \2 2 \3 3 \4 4 \5 5 \6 6 \7 7 \8 8 \9 9 \A 10 \B 11 \C 12 \D 13 \E 14 \F 15 \a 10 \b 11 \c 12 \d 13 \e 14 \f 15} 
                    reverse-digits (map (fn [a-digit] (char-to-digit-map a-digit)) (reverse string-representation))] 
                  (loop [nums reverse-digits 
                         power-of-base 1 
                         sum 0] 
                      (if (= 0 (count nums)) 
                          sum 
                          (recur (rest nums) (* power-of-base base) (+ sum (* (first nums) power-of-base))))))))) 
   
  (deftest test-convert-string-to-int 
    (is (= 1001 (convert-string-to-int "1001"))) 
    (is (= 1234567890 (convert-string-to-int "0001234567890"))) 
    (is (= 9 (convert-string-to-int "1001" 2))) 
    (is (= 4097 (convert-string-to-int "1001" 16))) 
    (is (= 65535 (convert-string-to-int "FFFF" 16))) 
    (is (= 195948557 (convert-string-to-int "BADF00D" 16)))) 
     
  (run-tests) 
#+END_SRC