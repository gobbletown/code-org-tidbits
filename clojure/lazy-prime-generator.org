#+BEGIN_SRC clojure -n :i clj :async :results verbatim code
  (defn prompt-int [prompt] 
      (println prompt) 
      (. Integer parseInt (read-line))) 
   
  (defn get-digits [number all-digits] 
      (if (= number 0) 
          all-digits 
          (recur (quot number 10) (conj all-digits (mod number 10))))) 
   
  (defn fizz-or-buzz-or-number [number] 
      (let [all-digits (get-digits number #{}) 
            has-digit-3 (contains? all-digits 3) 
            has-digit-5 (contains? all-digits 5)] 
          (cond (and has-digit-3 has-digit-5) (str "fizz-buzz (" number ")") 
                has-digit-3 (str "fizz (" number ")") 
                has-digit-5 (str "buzz (" number ")") 
                :else number))) 
   
  (defn evenly-divisible? [number divisor] 
      (= (mod number divisor) 0)) 
   
  (defn is-prime [potential-prime] 
      (let [all-numbers-up-to-sqrt (range 2 (+ (Math/sqrt potential-prime) 1.0))] 
          (not (some (fn [number] (evenly-divisible? potential-prime number)) all-numbers-up-to-sqrt)))) 
   
  (defn get-next-prime [start] 
      (if (is-prime start) start (recur (inc start)))) 
   
  (defn get-primes [start] 
      (let [next-prime (get-next-prime start)] 
          (lazy-seq (cons next-prime (get-primes (inc next-prime)))))) 
   
  (defn fizz-buzz [] 
      (let [start (prompt-int "Enter in a start value") 
            num-primes (prompt-int "Enter in how many primes to evaluate") 
            primes (take num-primes (get-primes start)) 
            final-output (map fizz-or-buzz-or-number primes)] 
          (doseq [result final-output] 
              (println result)))) 
   
  (fizz-buzz)
#+END_SRC